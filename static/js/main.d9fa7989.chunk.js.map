{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","joke","setJoke","_useState3","_useState4","fname","setFN","_useState5","_useState6","sname","setSN","newjoke","first","second","fetch","concat","then","res","json","res2","console","log","value","_useState7","localStorage","getItem","window","matchMedia","matches","JSON","parse","_useState8","dark","setMode","useEffect","setItem","stringify","react_default","a","createElement","className","type","checked","onChange","class","e","target","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kOA2DeA,MAvDf,WAAe,IAAAC,EACUC,mBAAS,cADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACDI,EADCJ,EAAA,GAAAK,EAEON,mBAAS,QAFhBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEAE,EAFAF,EAAA,GAAAG,EAGOV,mBAAS,OAHhBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNE,EAHMD,EAAA,GAGAE,EAHAF,EAAA,GAIPG,EAAS,SAACC,EAAMC,GACpBC,MAAK,gDAAAC,OAAiDH,EAAjD,cAAAG,OAAmEF,IACxEG,KAAK,SAAAC,GAAG,OAAEA,EAAIC,SACbF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZjB,EAAQiB,EAAKG,MAAMrB,SATVsB,EA0BQ1B,mBAXD,MADE2B,aAAaC,QAAQ,UAEpCC,OAAOC,WAAW,+BAA+BC,QAM7CC,KAAKC,MAAMN,aAAaC,QAAQ,UAtB9BM,EAAAhC,OAAAC,EAAA,EAAAD,CAAAwB,EAAA,GA0BNS,EA1BMD,EAAA,GA0BDE,EA1BCF,EAAA,GA+Bb,OAJAG,oBAAU,WACRV,aAAaW,QAAQ,OAAON,KAAKO,UAAUJ,IAC3CrB,EAAQN,EAAMI,IACd,CAACuB,IAEDK,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,EAAO,gBAAgB,OACrCK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,UACrBH,EAAAC,EAAAC,cAAA,SACME,KAAK,WACLC,QAASV,EACTW,SAAU,kBAAIV,GAASD,MAC7BK,EAAAC,EAAAC,cAAA,QAAMK,MAAM,mBAGVP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,UAAKP,EAAK,kBAAkB,oBACzBK,EAAAC,EAAAC,cAAA,sBAFF,cAGaF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOnB,MAAOjB,EAAOsC,SAAU,SAACE,GAAD,OAAKvC,EAAMuC,EAAEC,OAAOxB,UAASe,EAAAC,EAAAC,cAAA,WACnFF,EAAAC,EAAAC,cAAA,WAJF,aAIqBF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOnB,MAAOb,EAAOkC,SAAU,SAACE,GAAD,OAAKnC,EAAMmC,EAAEC,OAAOxB,UAClFe,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,UAAKtC,GACLoC,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,kBAAIpC,EAAQN,EAAMI,KAAnC,uBCzCcuC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,WAAP,KACEjB,EAAAC,EAAAC,cAACgB,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,KAAK,SAAA6C,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC","file":"static/js/main.d9fa7989.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport './App.css';\n\n\nfunction App() {\n  const [joke,setJoke] = useState(\"Loading...\")\n  const [fname,setFN]=useState(\"john\")\n  const [sname,setSN]=useState(\"doe\")\n  const newjoke =(first,second)=>{\n    fetch(`https://api.icndb.com/jokes/random?firstName=${first}&lastName=${second}`).\n    then(res=>res.json())\n    .then(res2=>{\n      console.log(res2)\n      setJoke(res2.value.joke)\n    })\n  }\n  const getMode =()=>{\n\n    const initialmode = localStorage.getItem(\"Mode\")\n    if(initialmode == null){\n      if(window.matchMedia(\"(prefers-color-scheme:dark)\").matches){\n        return true\n      }else{\n        return false\n      }\n    }else{\n      return JSON.parse(localStorage.getItem(\"Mode\")) \n    }\n    \n  }\n  const [dark,setMode]=useState(getMode())\n  useEffect(()=>{\n    localStorage.setItem(\"Mode\",JSON.stringify(dark))\n    newjoke(fname,sname)\n  },[dark])\n  return (\n    <div className={dark ? \"App dark-mode\":\"App\"}>\n      <div className=\"nav\">\n      <label className=\"switch\">\n  <input \n        type=\"checkbox\" \n        checked={dark}\n        onChange={()=>setMode(!dark)} />\n  <span class=\"slider round\"></span>\n   </label>\n    </div>\n    <div className=\"content\">\n   <h1>{dark?\"Dark Mode is on\":\"Light Mode is on\"}</h1>\n      <h1>JOKE APP</h1>\n      First Name:<input type=\"text\" value={fname} onChange={(e)=>setFN(e.target.value)}/><br></br>\n      <br></br>Last Name:<input type=\"text\" value={sname} onChange={(e)=>setSN(e.target.value)}/>\n      <h1>This is Your Jokes</h1>\n      <h4>{joke}</h4>\n      <button onClick={()=>newjoke(fname,sname)}>Get Another Joke</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}